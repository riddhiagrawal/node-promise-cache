// Generated by CoffeeScript 1.8.0
(function() {
  var Store, extend;

  extend = require('extend');

  Store = (function() {
    function Store(pool) {
      this.pool = pool;
    }


    /*
     * Connect to store.
     *
     * @param {function} cb
     */

    Store.prototype.connect = function(cb) {
      return this.pool.acquire((function(_this) {
        return function(err, conn) {
          if (err) {
            _this.pool.release(conn);
            if (typeof cb === 'function') {
              return cb(err);
            }
          }
          conn.select(0);
          if (typeof cb === 'function') {
            return cb(null, conn);
          }
        };
      })(this));
    };


    /*
     * Set an item by key.
     *
     * @param {string} key
     * @param {string} value
     * @param {function} cb
     */

    Store.prototype.set = function(key, value, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.set(key, value, function(err, result) {
            _this.pool.release(conn);
            return cb(err, result);
          });
        };
      })(this));
    };


    /*
     * Set an item by key for a certain number of minutes.
     *
     * @param {string} key
     * @param {string} value
     * @param {int} ttl
     * @param {function} cb
     */

    Store.prototype.setFor = function(key, value, ttl, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.setex(key, ttl, value, function(err, result) {
            _this.pool.release(conn);
            return cb(err, result);
          });
        };
      })(this));
    };


    /*
     * Determine whether an item exists in the store.
     *
     * @param {string} key
     * @param {function} cb
     */

    Store.prototype.has = function(key, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.exists(key, function(err, result) {
            _this.pool.release(conn);
            return cb(err, Boolean(result));
          });
        };
      })(this));
    };


    /*
     * Get the TTL of an item.
     *
     * @param {string} key
     * @param {function} cb
     */

    Store.prototype.ttl = function(key, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.ttl(key, function(err, result) {
            _this.pool.release(conn);
            return cb(err, result);
          });
        };
      })(this));
    };


    /*
     * Get an item from the store.
     *
     * @param {string} key
     * @param {function} cb
     */

    Store.prototype.get = function(key, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.get(key, function(err, result) {
            _this.pool.release(conn);
            if (err) {
              cb(err);
            }
            if (typeof cb === 'function') {
              return cb(null, result);
            }
          });
        };
      })(this));
    };


    /*
     * Delete an item from the store.
     *
     * @param {string} key
     * @param {function} cb
     */

    Store.prototype.del = function(key, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.del(key, function(err, result) {
            _this.pool.release(conn);
            if (typeof cb === 'function') {
              return cb(err, Boolean(result));
            }
          });
        };
      })(this));
    };


    /*
     * Flush the store.
     *
     * @param {function} cb
     */

    Store.prototype.flush = function(cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.flushdb(function(err, result) {
            _this.pool.release(conn);
            if (typeof cb === 'function') {
              return cb(err, result);
            }
          });
        };
      })(this));
    };


    /*
     * Increment the integer value of a key by @count. Default is 1.
     *
     * @param {string} key
     * @param {int} count
     * @param {function} cb
     */

    Store.prototype.increment = function(key, count, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.incrby(key, count, function(err, result) {
            _this.pool.release(conn);
            if (typeof cb === 'function') {
              return cb(err, result);
            }
          });
        };
      })(this));
    };


    /*
     * Decrement the integer value of a key by @count. Default is 1.
     *
     * @param {string} key
     * @param {int} count
     * @param {funciton} cb
     */

    Store.prototype.decrement = function(key, count, cb) {
      return this.connect((function(_this) {
        return function(err, conn) {
          if (err) {
            return cb(err);
          }
          return conn.decrby(key, count, function(err, result) {
            _this.pool.release(conn);
            if (typeof cb === 'function') {
              return cb(err, result);
            }
          });
        };
      })(this));
    };

    return Store;

  })();

  module.exports.klass = Store;

  module.exports.instance = function(pool, config) {
    var RedisPool;
    if (config == null) {
      config = {};
    }
    if (pool != null) {
      return new Store(pool);
    }
    config = extend(true, {
      redis: {
        host: '127.0.0.1',
        port: 6379,
        pool: {
          max: 1,
          min: 1
        }
      }
    }, config);
    RedisPool = require('sol-redis-pool');
    pool = new RedisPool({
      host: config.redis.host,
      port: config.redis.port
    }, {
      max: config.redis.pool.max,
      min: config.redis.pool.minutes
    });
    return new Store(pool);
  };

}).call(this);
